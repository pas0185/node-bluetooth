//
//  VTNodeDevice.h
//  Copyright (c) 2013 Variable Technologies. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "NodeDeviceDelegate.h"
#import "Node.h"

/**
  VTNodeDevice is the primary class used to interact with NODE+ devices.
 */

@interface VTNodeDevice : NSObject
#pragma mark - Properties
/**-----------------------------------------------------------------------------
 * @name Properties
 * -----------------------------------------------------------------------------
 */
/** The delegate object to receive events generated by this device */
@property (strong, nonatomic) NSObject<NodeDeviceDelegate> *delegate;

/** The CBPeripheral object associated with this Node device */
@property (strong, nonatomic) CBPeripheral *peripheral;

/**
 Kore Sensor Configuration
 **/
@property (nonatomic) VTNodeKoreConfig *koreConfig;

/**
 The firmware version (major)
 */
@property (nonatomic) uint8_t firmwareMajorRev;

/**
 The firmware version (minor)
 */
@property (nonatomic) uint8_t firmwareMinorRev;

/**
 The model of this Node device
 */
@property (strong, nonatomic) NSString *model;

/** The type of module attached to port A
 */
@property (nonatomic) VTNodeModuleType module_a_type;
/** The type of module attached to port B
 */
@property (nonatomic) VTNodeModuleType module_b_type;

/** The subtype of the module attached to port A
 */
@property (nonatomic) VTNodeModuleSubType module_a_subtype;

/** The subtype of the module attached to port B
 */
@property (nonatomic) VTNodeModuleSubType module_b_subtype;

/** The version of the module attached to port A
 */
@property (nonatomic) uint8_t module_a_version;

/** The version of the module attached to port B
 */
@property (nonatomic) uint8_t module_b_version;


/** The serial number of the Node device
 */
@property (strong, nonatomic, readonly) NSString *koreSerial;

/** The serial number of the Node device
 */
@property (strong, nonatomic, readonly) NSString *serialNumber;


/** The serial number of the module attached to port A
 */
@property (strong, nonatomic, readonly) NSString *moduleASerial;

/** The serial number of the module attached to port B
 */
@property (strong, nonatomic, readonly) NSString *moduleBSerial;

/** The current battery level expressed as a voltage (typical voltage range is 3.7 - 4.2)
 */
@property (nonatomic) float batteryLevel;

/** The current quiet mode of the device */
@property (nonatomic) VTNodeQuietModeSetting quietMode;
#pragma mark -

#pragma mark - Initialization
/**-----------------------------------------------------------------------------
 * @name Initialization
 * -----------------------------------------------------------------------------
 */

/** Returns a VTNodeDevice object initialized with the given delegate and peripheral.
 
 @param delegate The delegate object you want to receive events generated by this device
 @param device The CBPeripheral object with which to associate the object
 
 @return A VTNodeDevice object initalized with the given delegate and peripheral
 */
+ (VTNodeDevice *) nodeDeviceWithDelegate:(NSObject<NodeDeviceDelegate> *)delegate withDevice:(CBPeripheral *)device;

/** Returns a VTNodeDevice object initialized with the given delegate and peripheral.
 
 @param delegate The delegate object you want to receive events generated by this device
 @param device The CBPeripheral object with which to associate the object
 
 @return A VTNodeDevice object initalized with the given delegate and peripheral
 */
-(id) initWithDelegate:(NSObject<NodeDeviceDelegate> *)delegate withDevice:(CBPeripheral *)device;
#pragma mark -

#pragma mark - Connection
/**-----------------------------------------------------------------------------
 * @name Connection
 * -----------------------------------------------------------------------------
 */
/** The service UUID for Node
 */
+(CBUUID *) nodeServiceUUID;
/**
 Requests that the NODE device update its Bluetooth Low Energy connection paramaters.
 @param min_conn_interval value from 6 to 3200 [1.25ms]. Can be set to 65535 for no specific interval
 @param max_conn_interval value from 6 to 3200 [1.25ms]. Can be set to 65535 for no specific interval
 @param  slave_latency  value from 0 to 499 [connection intervals]
 @param  supervision_timeout value from 10 to 3200 [10ms]
 
 These connection paramaters may be rejected if they do not follow the guidelines set forth in
 this document: https://developer.apple.com/hardwaredrivers/BluetoothDesignGuidelines.pdf
 
 For the fastest connection, use: 8,16,0,400
 
 */
-(void) requestBLEConnectionParamsUpdateWithMinConnInterval: (uint16_t)min_conn_interval withMaxConnInterval: (uint16_t)max_conn_interval withSlaveLatency: (uint16_t)slave_latency withSupervisionTimeout: (uint16_t)supervision_timeout;

/**
 Requests that NODE go in to BLE Master mode.
 When NODE is in Master mode, it will not be connectable and will not transmit any RX packets.
 The device will remain in Master mode until the device observes an advertising packet from a
 BLE slave device advertising a service with the UUID 0xDE20
 */
-(void) requestBLERadioModeChangeToMaster;

#pragma mark -

#pragma mark - Communication
/**-----------------------------------------------------------------------------
 * @name Communication
 * -----------------------------------------------------------------------------
 */
/** Send a Node command to a Node device
 
 @param str The command to send
 */
-(void) sendString:(NSString *)str;

/** Send bytes to a Node device
 
 @param bytes Pointer to bytes to send
 @param length Number of bytes to send
 
 */
-(void) sendBytes:(const void *)bytes length:(NSUInteger)length;
#pragma mark - 

#pragma mark - Device Settings
/**-----------------------------------------------------------------------------
 * @name Device Settings
 * -----------------------------------------------------------------------------
 */
/**
 Request the quiet mode status from the Node device.
 */
-(void) requestQuietModeStatus;

/** Request that a Node device enable or disable "QUIET" mode
 In quiet mode, a device will have an increased battery life due to the following features being disabled:
 * Shake to wake
 * Audible alerts
 * LED status lights
 
 @param setting VTNodeQuietModeSettingQuiet to turn quiet mode ON;
 */
-(void)requestQuietModeToBeSet:(VTNodeQuietModeSetting)setting;

/**
 Request the firmware version
 */
-(void) requestFirmwareVersion;
#pragma mark -

#pragma mark - Utility
/**-----------------------------------------------------------------------------
 * @name Utility
 * -----------------------------------------------------------------------------
 */
/** Controls power of Node's LEDs
 
 Each of the leds take an unsigned char with a range from 0-255. With 0 being the led is completely off.
 And 255 being the led is completely on.
 
 @param aBluePwr The brightness of the first blue led.
 @param bBluePwr The brightness of the second blue led.
 @param aRedPwr The brightness of the first red led.
 @param bRedPwr The brightness of the second red led.
 */
-(void) setLedABlue:(uint8_t)aBluePwr BBlue:(uint8_t)bBluePwr ARed:(uint8_t)aRedPwr BRed:(uint8_t)bRedPwr;

/** Turns on the four leds (two at each end) for a given duration
 
 Each of the leds take an unsigned char with a range from 0-255. With 0 being the led is completely off.
 And 255 being the led is completely on.
 
 @param led1B The brightness of the first blue led.
 @param led2B The brightness of the second blue led.
 @param led1R The brightness of the first red led.
 @param led2R The brightness of the second red led.
 @param duration The duration to keep the leds on for - in increments of 10ms. (1=10ms)
 */
-(void) ledsOn:(unsigned char)led1B led2B:(unsigned char)led2B led1R:(unsigned char)led1R led2R:(unsigned char)led2R duration:(uint16_t)duration;

/** Turns on the four leds (two at each end) for a given duration with a given pulse frequency
 
 Each of the leds take an unsigned char with a range from 0-255. With 0 being the led is completely off.
 And 255 being the led is completely on.
 
 When pulsing the leds go from 0 to their set brightness and then back to 0 when pulsing up/down.
 
 @param led1B The brightness of the first blue led.
 @param led2B The brightness of the second blue led.
 @param led1R The brightness of the first red led.
 @param led2R The brightness of the second red led.
 @param duration The duration to keep the leds on for - in increments of 10ms. (1=10ms)
 @param pulseFrequency The time interval between a full cycle of the leds (On->off) - in increments of 10ms. (1=10ms)
 */
-(void) ledsPulse:(unsigned char)led1B led2B:(unsigned char)led2B led1R:(unsigned char)led1R led2R:(unsigned char)led2R duration:(uint16_t)duration pulseFrequency:(uint16_t)pulseFrequency;

/** Turns off the four leds
 
 */
-(void) ledsOff;

/** Restores LED behavior to the default behavior (e.g. shake to wake, button press for blue)
 */
-(void) ledRestoreDefaultBehavior;

/**
 Request that the Node change its BLE Peripheral name
 @param newName New name for the device
 */
-(void) setDeviceName: (NSString *)newName;

/**
 Attempts to reboot the device
 */
-(void) reboot;

/**
 Attemps to turn off the NODE device
 **/
-(void) shutdown;

/**
 Attempts to turn off the Bluetooth radio on this NODE device.
 To turn the radio back on, the hardware button on the NODE device must be pressed twice in quick succession
 with a maximum delay of two seconds between button presses.
 
 This will only work with NODE 2 devices.
 **/
-(void) radioShutdown;

/** Disable all data streaming modes for the device */
-(void) disableAllStreaming;

/** Write data to a crypto data block
 @param block The block address (0-15)
 @param location Kore, Module A, or Module B
 @param data 32 bytes of data
 */
-(void) writeCryptoBlock:(uint8_t)block ForModule:(VTModuleLocation)location WithData:(uint8_t *)data;

/** Request that the Node device communicate its battery level and attached module types
 
 nodeDeviceDidUpdateModuleTypes and nodeDeviceDidUpdateBatteryLevel will be invoked
 
 */
-(void) requestStatus;

/** Request that the Node device communicate its module subtypes
 
 */
-(void) requestModuleSubtypes;

/** Request that the Node device communicate its module versions (used for batching in Chroma)
 
 */
-(void) requestModuleVersions;
/** Request that the Node device communicate all module info in a single method
 
 */
-(void)requestModulesAllStats;

/** Requests that a Node device transmit it serial number and the serial numbers of its attached modules
 
 */
-(void) requestSerial;

#pragma mark -

#pragma mark - Motion
/**-----------------------------------------------------------------------------
 * @name Motion
 * -----------------------------------------------------------------------------
 */
/**
 Request the KORE sensor configuration.
 */
-(void) requestKoreConfiguration;

/** Sets the range of the accelerometer on a NODE device.
    @param scale The desired scale.
 */
-(void) setAccelerometerScale: (VTNodeAccelerometerScale) scale;

/** Sets the range of the gyroscope on a NODE device.
     @param scale The desired scale.
 */
-(void) setGyroScale: (VTNodeGyroScale) scale;

/** Enable or disable KORE streaming using a provided period and lifetime
 NOTE: Timestamping is only possible using NK-02 devices
 NOTE: The period will be as small as possible (it may actually be higher or lower than 20ms)
 
 @param aMode set to YES to stream accelerometer readings
 @param gMode set to YES to stream gyroscope readings
 @param mMode set to YES to stream magnetometer readings
 @param p The period between readings in units of 10ms (NOTE: if this is 1, NODE will stream motion data as fast as possible; The upper limit for this paramater is 10 (100ms))
 @param life The number of readings to collect (0 for infinite)

 @param timestampingEnabled Set to YES to enabled timestamping of data. If set to YES, all readings returned will be timestamped by the NODE device at time of reading.
 
 */
-(void) setStreamModeAcc: (bool)aMode Gyro:(bool)gMode Mag:(bool)mMode withPeriod:(uint16_t)p withLifetime:(uint16_t)life withTimestampingEnabled: (bool) timestampingEnabled;

/** Enable or disable KORE streaming using the default period (smallest possible, which is approximately 20ms) and duration (infinite)
 NOTE: Timestamping is only possible using NK-02 devices
 NOTE: The period will be as small as possible (it may actually be higher or lower than 20ms)
 
 @param aMode set to YES to stream accelerometer readings
 @param gMode set to YES to stream gyroscope readings
 @param mMode set to YES to stream magnetometer readings
 @param timestampingEnabled Set to YES to enabled timestamping of data. If set to YES, all readings returned will be timestamped by the NODE device at time of reading.
 
 */
-(void) setStreamModeAcc: (bool)aMode Gyro:(bool)gMode Mag:(bool)mMode withTimestampingEnabled: (bool) timestampingEnabled;

/** Enable or disable streaming of orientation data using the default period (10ms) and duration (infinite)
 
 @param qMode Set to YES to enable streaming of quaternion data
 */
-(void) setStreamModeOrientation: (bool)qMode;

/**
 Put the Node device into magnetometer calibration mode.
 NOTE: Only valid for NK-01 devices.
 
 The device will disconnect. The device should be spun along each axis during calibration.
 */
-(void) requestMagnetometerCalibration;

/**
 Put the Node device into gyroscope calibration mode.
 NOTE: Only valid for NK-01 devices.
 
 The device will disconnect. The device should be placed on a flat surface and kept very still during calibration.
 */
-(void) requestGyroscopeCalibration;

/** Enable or disable streaming of orientation data using the default period (10ms) and duration (infinite)
 This function is deprecated. Please use:
 -(void) setStreamModeOrientation: (bool)qMode;
 
 @param yprMode Set to YES to enable streaming of yaw, pitch, and roll data (not supported)
 @param qMode Set to YES to enable streaming of quaternion data
 */
-(void) setStreamModeOriYpr: (bool)yprMode QuatMode:(bool)qMode __deprecated;

/** Enable or disable KORE streaming using the default period (smallest possible, which is approximately 20ms) and duration (infinite)
 This method is deprecated. Please use:
 -(void) setStreamModeAcc: (bool)aMode Gyro:(bool)gMode Mag:(bool)mMode withTimestampingEnabled: (bool) timestampingEnabled;
 
 @param aMode set to YES to stream accelerometer readings
 @param gMode set to YES to stream gyroscope readings
 @param mMode set to YES to stream magnetometer readings
 
 */
-(void) setStreamModeAcc: (bool)aMode Gyro:(bool)gMode Mag:(bool)mMode __deprecated;

/** Enable or disable KORE streaming using a specified period and duration
 This method is deprecated. Please use:
 -(void) setStreamMode: (bool)aMode Gyro:(bool)gMode Mag:(bool)mMode withPeriod:(uint16_t)p withLifetime:(uint16_t)life withTimestampingEnabled: (bool) timestampingEnabled;
 
 p and life are only valid if at least one mode param (aMode, gMode, or mMode) is set to YES
 NOTE: NK-02 models will always stream motion data at the fastest available rate, and until explicitly told to stop
 (the period and lifetime parameters are ignored)
 
 @param aMode set to YES to stream accelerometer readings
 @param gMode set to YES to stream gyroscope readings
 @param mMode set to YES to stream magnetometer readings
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 
 */
-(void) setStreamModeAcc: (bool)aMode Gyro:(bool)gMode Mag:(bool)mMode withPeriod:(uint16_t)p withLifetime:(uint16_t)life __deprecated;
#pragma mark -

#pragma mark - High Speed Accelerometer
/**-----------------------------------------------------------------------------
 * @name High Speed Accelerometer
 * -----------------------------------------------------------------------------
 */

/**
 Start high speed accelerometer capture.
 
 @param hz The target Hz (currently restricted to 500/1000 Hz for on board MPU and 400/800 Hz for accel. module)
 @param useAutoStart YES to not start collecting data until a motion event occurs
 @param useAutoStop
 */
-(void) startHighSpeedAccelerometerWithTargetHz: (NSUInteger) hz usingAutoStart: (BOOL) useAutoStart usingAutoStop: (BOOL)useAutoStop;

/**
 Stop high speed accelerometer capture.

 */
- (void) stopHighSpeedAccelerometer;

/** 
 Fetch readings captured using high speed accelerometer mode
 */
-(void) startHighSpeedAccelerometerDataFetch;
#pragma mark -

#pragma mark - Oxa Module
/**-----------------------------------------------------------------------------
 * @name Oxa Module
 * -----------------------------------------------------------------------------
 */
/**
 Store Oxa baseline value
 Writes Oxa baseline value to nonvolatile memory on Oxa module
 This method is deprecated. Please use:
 -(void) setOxaBaseline: (float) baseline forPort: (VTModuleLocation)port;
 
 @param baseline Baseline value to store
 */
-(void) setOxaBaseline: (float) baseline __deprecated;

/**
 Store Oxa baseline value
 Writes Oxa baseline value to nonvolatile memory on Oxa module
 @param baseline Baseline value to store
 @param port Module port on Node from which to stream (Port B is on the same side of Node as the Button and USB port)
 */
-(void) setOxaBaseline: (float) baseline forPort: (VTModuleLocation)port;

/**
 Request baseline value stored on oxa module.
 If two Oxa modules are connected, the value from the module on port A will be returned.
 
 This function is deprecated. Please use:
 -(void) requestOxaBaselineForPort: (VTModuleLocation) port;
 */
-(void) requestOxaBaseline __deprecated;

/**
 Request baseline value stored on oxa module
 
 @param port Module port on Node from which to stream (Port B is on the same side of Node as the Button and USB port)
 */
-(void) requestOxaBaselineForPort: (VTModuleLocation) port;

/** Enable or disable streaming of OXA readings using default settings.
 
 @param oxaMode Set to YES to enable OXA readings
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 */
-(void) setStreamModeOxa:(bool)oxaMode withPeriod:(uint16_t)p withLifetime:(uint16_t)life __deprecated;

/** Enable or disable streaming of OXA readings using default settings.
 
 @param oxaMode Set to YES to enable OXA readings
 @param port Module port on Node from which to stream (Port B is on the same side of Node as the Button and USB port)
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 */
-(void) setStreamModeOxa:(bool)oxaMode forModulePort: (VTModuleLocation)port withPeriod:(uint16_t)p withLifetime:(uint16_t)life;

/** Enable or disable streaming of OXA readings.
 
 @param oxaMode Set to YES to enable OXA readings
 @param tia_gain TIA feedback resistance selection
 0 External resitance
 1 2.75kΩ
 2 3.5kΩ
 3 7kΩ
 4 14kΩ
 5 35kΩ
 6 120kΩ
 7 350kΩ (default)
 @param rload   R_load selection
 0 10Ω (default)
 1 33Ω
 2 50Ω
 3 100Ω
 @param ref_source Reference voltage source selection
 0 Internal
 1 External
 @param int_z Internal zero selection (Percentage of the source reference)
 00 20% (default)
 01 50%
 10 67%
 11 Internal zero circuitry bypassed (only in O2 ground referred measurement)
 @param bias_sign Selection of the Bias polarity
 0 Negative (VWE – VRE)<0V (default)
 1 Positive (VWE –VRE)>0V
 @param bias BIAS selection (Percentage of the source reference)
 0  0% (default)
 1  1%
 2  2%
 3  4%
 4  6%
 5  8%
 6  10%
 7  12%
 8  14%
 9  16%
 10 18%
 11 20%
 12 22%
 13 24%
 @param fet_short Shorting FET feature
 0 Disabled (default)
 1 Enabled
 @param op_mode Mode of Operation selection
 0 Deep Sleep (default)
 1 2-lead ground referred galvanic cell
 2 Standby
 3 3-lead amperometric cell
 6 Temperature measurement (TIA OFF)
 7 Temperature measurement (TIA ON)
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 */
-(void) setStreamModeOxa:(bool)oxaMode withTiaGain:(uint8_t)tia_gain withRLoad:(uint8_t)rload withRefSource:(uint8_t)ref_source withIntZ:(uint8_t)int_z withBiasSign:(uint8_t)bias_sign withBias:(uint8_t)bias withFetShort:(uint8_t)fet_short withOpMode:(uint8_t)op_mode withPeriod:(uint16_t)p withLifetime:(uint16_t)life __deprecated;

/** Enable or disable streaming of OXA readings for a module connected to a specific port.
 
 @param oxaMode Set to YES to enable OXA readings
 @param port Module port on Node from which to stream (Port B is on the same side of Node as the Button and USB port)
 @param tia_gain TIA feedback resistance selection
 0 External resitance
 1 2.75kΩ
 2 3.5kΩ
 3 7kΩ
 4 14kΩ
 5 35kΩ
 6 120kΩ
 7 350kΩ (default)
 @param rload   R_load selection
 0 10Ω (default)
 1 33Ω
 2 50Ω
 3 100Ω
 @param ref_source Reference voltage source selection
 0 Internal
 1 External
 @param int_z Internal zero selection (Percentage of the source reference)
 00 20% (default)
 01 50%
 10 67%
 11 Internal zero circuitry bypassed (only in O2 ground referred measurement)
 @param bias_sign Selection of the Bias polarity
 0 Negative (VWE – VRE)<0V (default)
 1 Positive (VWE –VRE)>0V
 @param bias BIAS selection (Percentage of the source reference)
 0  0% (default)
 1  1%
 2  2%
 3  4%
 4  6%
 5  8%
 6  10%
 7  12%
 8  14%
 9  16%
 10 18%
 11 20%
 12 22%
 13 24%
 @param fet_short Shorting FET feature
 0 Disabled (default)
 1 Enabled
 @param op_mode Mode of Operation selection
 0 Deep Sleep (default)
 1 2-lead ground referred galvanic cell
 2 Standby
 3 3-lead amperometric cell
 6 Temperature measurement (TIA OFF)
 7 Temperature measurement (TIA ON)
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 */
-(void) setStreamModeOxa:(bool)oxaMode forModulePort: (VTModuleLocation) port withTiaGain:(uint8_t)tia_gain withRLoad:(uint8_t)rload withRefSource:(uint8_t)ref_source withIntZ:(uint8_t)int_z withBiasSign:(uint8_t)bias_sign withBias:(uint8_t)bias withFetShort:(uint8_t)fet_short withOpMode:(uint8_t)op_mode withPeriod:(uint16_t)p withLifetime:(uint16_t)life;

/** Request that a CO2 module attached to NODE be put into background calibration mode.
    This calibration should be performed with NODE in a 400 PPM CO2 environment.
    Calibration will take several minutes. 
 
    During calibration,
 -(void) nodeDeviceDiDUpdateOxaStatus:(VTNodeDevice *)device withStatus: (VTNodeOxaStatus) status;
 will be invoked with status set to VTNodeOxaStatusOperationInProgress
 
   When calibration successfully completes,
  -(void) nodeDeviceDiDUpdateOxaStatus:(VTNodeDevice *)device withStatus: (VTNodeOxaStatus) status;
 will be invoked with status set to VTNodeOxaStatusOperationSuccess
 
 */
-(void) requestOxaCO2BackgroundCalibration;

/** Request that a CO2 module attached to NODE be put into nitrogen calibration mode.
 This calibration should be performed with NODE in a 0 PPM CO2 environment.
 Calibration will take several minutes.
 
 During calibration,
 -(void) nodeDeviceDiDUpdateOxaStatus:(VTNodeDevice *)device withStatus: (VTNodeOxaStatus) status;
 will be invoked with status set to VTNodeOxaStatusOperationInProgress
 
 When calibration successfully completes,
 -(void) nodeDeviceDiDUpdateOxaStatus:(VTNodeDevice *)device withStatus: (VTNodeOxaStatus) status;
 will be invoked with status set to VTNodeOxaStatusOperationSuccess

 */
-(void) requestOxaCO2NitroCalibration;

/** Request that an in-progress CO2 calibration operation be cancelled
 */
-(void) requestOxaCO2BackgroundCalibrationCancel;

#pragma mark -

#pragma mark - Thermal Array Module
/**-----------------------------------------------------------------------------
 * @name Thermal Array Module
 * -----------------------------------------------------------------------------
 */
/** Enable of disable ARR Therma module streaming using a specified period and duration
 
 @param irMode set to YES to stream IR Therma readings
 @param ledMode set to YES to enabled the spotting LED
 @param eepromData set to YES to include EEPROM dump from module
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 */
-(void) setStreamModeArrTherma: (bool)irMode withLedPower:(bool)ledMode withEepromData: (bool) eepromData withPeriod:(uint16_t)p withLifetime:(uint16_t)life;
#pragma mark -

#pragma mark Therma Module
/**-----------------------------------------------------------------------------
 * @name Therma Module
 * -----------------------------------------------------------------------------
 */
/** Enable of disable IR Therma module streaming using a specified period and duration
 
 @param irMode set to YES to stream IR Therma readings
 @param ledMode set to YES to enabled the spotting LED
 @param emiss The desired emissivity (0 to 1.0)
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 @param timestampingEnabled Set to YES to enabled timestamping of data. If set to YES, all readings returned will be timestamped by the NODE device at time of reading.
 
 */
-(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withEmissivity: (float)emiss withPeriod:(uint16_t)p withLifetime:(uint16_t)life withTimestampingEnabled: (bool) timestampingEnabled;

/** Enable of disable IR Therma module streaming using a specified period and duration
 
 @param irMode set to YES to stream IR Therma readings
 @param ledMode set to YES to enabled the spotting LED
 @param emiss The desired emissivity (0 to 1.0)
 @param timestampingEnabled Set to YES to enabled timestamping of data. If set to YES, all readings returned will be timestamped by the NODE device at time of reading.
 
 */
-(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withEmissivity: (float)emiss withTimestampingEnabled: (bool) timestampingEnabled;

/** Enable or disable IR Therma module streaming using the default period (100ms) and duration (infinite) with the spotting LED powered on
 
 This method is deprectated. Please use
 -(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withEmissivity: (float)emiss withPeriod:(uint16_t)p withLifetime:(uint16_t)life withTimestampingEnabled: (bool) timestampingEnabled;
 or
 -(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withEmissivity: (float)emiss withTimestampingEnabled: (bool) timestampingEnabled;
 
 @param irMode set to YES to stream IR Therma readings
 */
-(void) setStreamModeIRTherma: (bool)irMode __deprecated;

/** Enable or disable IR Therma module streaming using the default period (100ms) and duration (infinite)
 
 This method is deprectated. Please use
 -(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withEmissivity: (float)emiss withPeriod:(uint16_t)p withLifetime:(uint16_t)life withTimestampingEnabled: (bool) timestampingEnabled;
 or
 -(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withEmissivity: (float)emiss withTimestampingEnabled: (bool) timestampingEnabled;
 
 @param irMode set to YES to stream IR Therma readings
 @param ledMode set to YES to enabled the spotting LED
 */
-(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode __deprecated;

/** Enable of disable IR Therma module streaming using a specified period and duration
 
 This method is deprectated. Please use
 -(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withEmissivity: (float)emiss withPeriod:(uint16_t)p withLifetime:(uint16_t)life withTimestampingEnabled: (bool) timestampingEnabled;
 or
 -(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withEmissivity: (float)emiss withTimestampingEnabled: (bool) timestampingEnabled;
 
 @param irMode set to YES to stream IR Therma readings
 @param ledMode set to YES to enabled the spotting LED
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 
 */
-(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withPeriod:(uint16_t)p withLifetime:(uint16_t)life __deprecated;

/** Enable of disable IR Therma module streaming using a specified period and duration
 
 This method is deprectated. Please use
 -(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withEmissivity: (float)emiss withPeriod:(uint16_t)p withLifetime:(uint16_t)life withTimestampingEnabled: (bool) timestampingEnabled;
 or
 -(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withEmissivity: (float)emiss withTimestampingEnabled: (bool) timestampingEnabled;
 
 @param irMode set to YES to stream IR Therma readings
 @param ledMode set to YES to enabled the spotting LED
 @param emiss The desired emissivity (0 to 1.0)
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 
 */
-(void) setStreamModeIRTherma: (bool)irMode withLedPower:(bool)ledMode withEmissivity: (float)emiss withPeriod:(uint16_t)p withLifetime:(uint16_t)life __deprecated;
#pragma mark -

#pragma mark - Clima Module
/**-----------------------------------------------------------------------------
 * @name Clima Module
 * -----------------------------------------------------------------------------
 */
/** Enable or disable streaming of clima data using the default period and duration (infinite)
 
 @param tempPressureMode Set to YES to enable streaming of ambient temperature and pressure readings
 @param humidityMode Set to YES to enable streaming of relative humidity readings
 @param lpMode Set to YES to enable streaming of ambient light and proximity
 @param timestampingEnabled Set to YES to enabled timestamping of data. If set to YES, all readings returned will be timestamped by the NODE device at time of reading.
 */
-(void) setStreamModeClimaTP: (bool) tempPressureMode Humidity: (bool)humidityMode LightProximity:(bool)lpMode withTimestampingEnabled: (bool) timestampingEnabled;

/** Enable or disable streaming of clima data using specified period and duration
 
 @param tempPressureMode Set to YES to enable streaming of ambient temperature and pressure readings
 @param humidityMode Set to YES to enable streaming of relative humidity readings
 @param lpMode Set to YES to enable streaming of ambient light and proximity
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 @param timestampingEnabled Set to YES to enabled timestamping of data. If set to YES, all readings returned will be timestamped by the NODE device at time of reading.
 */
-(void) setStreamModeClimaTP: (bool) tempPressureMode Humidity: (bool)humidityMode LightProximity:(bool)lpMode withPeriod:(uint16_t)p withLifetime:(uint16_t)life withTimestampingEnabled: (bool) timestampingEnabled;

/** Enable or disable streaming of clima data using default period (250 ms) and duration (infinite)
 
 @param tempPressureMode Set to YES to enable streaming of ambient temperature and pressure readings
 @param humidityMode Set to YES to enable streaming of relative humidity readings
 @param lpMode Set to YES to enable streaming of ambient light and proximity
 
 This function has been deprecated. Please use
 -(void) setStreamModeClimaTP: (bool) tempPressureMode Humidity: (bool)humidityMode LightProximity:(bool)lpMode withTimestampingEnabled: (bool) timestampingEnabled;
 */
-(void) setStreamModeClimaTP: (bool) tempPressureMode Humidity: (bool)humidityMode LightProximity:(bool)lpMode __deprecated;

/** Enable or disable streaming of clima data using specified period and duration
 
 @param tempPressureMode Set to YES to enable streaming of ambient temperature and pressure readings
 @param humidityMode Set to YES to enable streaming of relative humidity readings
 @param lpMode Set to YES to enable streaming of ambient light and proximity
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 */
-(void) setStreamModeClimaTP: (bool) tempPressureMode Humidity: (bool)humidityMode LightProximity:(bool)lpMode withPeriod:(uint16_t)p withLifetime:(uint16_t)life __deprecated;

#pragma mark Clima Pro
/** Enable or disable streaming of clima pro data using default period (250 ms) and duration (infinite)
 
 @param tempMode Set to YES to enable streaming of ambient temperature readings
 @param pressureMode Set to YES to enable streaming of ambient pressure readings
 @param humidityMode Set to YES to enable streaming of relative humidity readings
 @param lpMode Set to YES to enable streaming of ambient light and proximity
 @param lightningMode Set to YES to enable streaming lightning / storm proximity info
 */
-(void) setStreamModeClimaProT:(bool)tempMode Pressure:(bool)pressureMode Humidity:(bool)humidityMode LightProximity:(bool)lpMode lightning:(bool)lightningMode;
/** Enable or disable streaming of clima data using specified period and duration
 
 @param tempMode Set to YES to enable streaming of ambient temperature readings
 @param pressureMode Set to YES to enable streaming of ambient pressure readings
 @param humidityMode Set to YES to enable streaming of relative humidity readings
 @param lpMode Set to YES to enable streaming of ambient light and proximity
 @param lightningMode Set to YES to enable streaming lightning / storm proximity info
 @param p The period between readings in units of 10ms
 @param life The number of readings to collect (0 for infinite)
 */
-(void) setStreamModeClimaProT:(bool)tempMode Pressure:(bool)pressureMode Humidity:(bool)humidityMode LightProximity:(bool)lpMode lightning:(bool)lightningMode withPeriod:(uint16_t)p withLifetime:(uint16_t)life;
#pragma mark -

#pragma mark - Luma Module
/**-----------------------------------------------------------------------------
 * @name Luma Module
 * -----------------------------------------------------------------------------
 */
/** Turn on or off LEDs on the LUMA module
 
 There are eight LEDs on the LUMA module. Each LED is controlled by a single bit of a 1-byte value.
 To turn all LEDs off, mode should be set to 0.
 To turn all LEDs on, mode should be set to 255.
 To turn on LEDs 0 and 4, the value 0b00010001 (17) should be used
 
 @param mode A value between 0 and 255 that sets the LED level for LUMA
 */
-(void) setLumaMode: (unsigned char)mode;

/** Set LUMA to strobe at a requested frequency
 For NK-02 devices, the permitted frequency is between 0.3 and 100 Hz
 For NK-01 devices, the permitted frequency is between 0.1 and 38 Hz
 
 @param rateInHz Strobe rate (see notes above)
 */
-(void) setLumaStrobe:(float)rateInHz;

/** Stop LUMA strobe
 */
-(void) stopLumaStrobe;
#pragma mark -

#pragma mark - IO Module
/**-----------------------------------------------------------------------------
 * @name IO Module
 * -----------------------------------------------------------------------------
 */
/** requestIoUart sets up UART for...
 @param baudRate - Baudrate - up to 9600 baud works on BTLE, above that will result in dataloss
 @param flowControl - (Untested)
 */
-(void) requestIoUart:(uint32_t)baudRate flowControl:(BOOL)flowControl;
/** Send message over the IO Modules UART Pins
 @param payloadSize - number of bytes to send
 @param buffer - NSData of buffer to send
 */
-(void) sendIOUart:(uint32_t)payloadSize buffer:(NSData*)buffer;
/** requestIOModulePowerDown
 Powerdown I/O, stops all streaming, etc.
 */
-(void)requestIOModulePowerDown;

/** Set IO Module's In/Out/IRQ Config
 
 The  delegate method will be invoked in response
 Requires firmware version newer than Sept 25,2013
 @param pinConfigArray Array of 8 NSNumbers w/ intValue set to VTNodeGPI,VTNodeGPO, or VTNodeIRQ representing pins D7 to D0 setting
 */
-(void)setIOModuleIOPinConfig:(NSArray*)pinConfigArray;
/** Set IO Module's GPO Pins
 
 The  delegate method will be invoked in response
 Requires firmware version newer than Sept 25,2013
 @param writeMask 8 bit (D7,D6...D0). Set bits to 1 if change desired
 @param byteToWrite 8 bit (D7,D6...D0). Set bits to 1 to write 1
 */
-(void)setIOModuleIOPins:(uint8_t)writeMask byteToWrite:(uint8_t)byteToWrite;
/** Requests IO Module's value on port
 */
-(void)requestIOModulePins;
/** Requests IO Module's A2D value for A0
 */
-(void)requestIOModuleA0;
/** Requests IO Module's A2D value for A1
 */
-(void)requestIOModuleA1;
/** Set up IO Module to stream IO pin and A0,A1
 @param iopins stream IO Pins?
 @param a0 stream A2D A0
 @param a1 stream A2D A1

 */
-(void)requestIOModuleStreaming:(BOOL) iopins withA0:(BOOL)a0 withA1:(BOOL)a1;
#pragma mark -

#pragma mark - GPS Module
/**-----------------------------------------------------------------------------
 * @name GPS Module
 * -----------------------------------------------------------------------------
 */
/** Requests GPS streaming
 
 The  delegate method will be invoked in response
 Requires firmware version 3.11
 @param streamLocation Set as True to request stream of lat/lon and .
 @param streamAltAndPrecision - set as true to request streaming data to include altitude, HDOP, WGS84 - altitude, and # satellites.
 @param streamSattelites - set as true to receive satellite details.
 @param updateRate_1_or_5Hz - set as either 1 or 5 for 1Hz or 5Hz update rate.
 */
-(void) requestGpsStreamingWithLocation:(BOOL)streamLocation streamAltAndPrecision:(BOOL)streamAltAndPrecision streamSattelites:(BOOL)streamSattelites gpsUpdateRate:(uint8_t)updateRate_1_or_5Hz;

/** Requests GPS streaming stop and module sleep/stdby
 
 The  delegate method will be invoked in response
 Requires firmware version 3.11
 */
-(void)requestGpsSleep;

/** Requests GPS full power down - forgets location/state
 
 The  delegate method will be invoked in response
 Requires firmware version 3.11
 */
-(void)requestGpsPowerDown;
#pragma mark -

#pragma mark - Barcode Module
/**-----------------------------------------------------------------------------
 * @name Barcode Module
 * -----------------------------------------------------------------------------
 */
/** Requests a single reading from the barcode module
 
 */
-(void)requestBarcodeReading;

/** Starts or stops streaming from the barcode module
    @param on_off Set to YES to start streaming. Set to NO to stop streaming.
 */
-(void)setStreamModeBarcode: (bool) on_off;
#pragma mark -

#pragma mark - Radia Module
/**-----------------------------------------------------------------------------
 * @name Radia Module
 * -----------------------------------------------------------------------------
 */
/** Enable or disable streaming of radiation data
 
 @param enabled YES to enable streaming
 @param period The period between readings in units of 10ms
 @param lifetime The number of readings to collect (0 for infinite)
 
 */
-(void) setStreamModeRadia: (bool)enabled withPeriod: (uint16_t)period withLifetime: (uint16_t)lifetime;
#pragma mark -

#pragma mark - Thermocouple Module
/**-----------------------------------------------------------------------------
 * @name Thermocouple Module
 * -----------------------------------------------------------------------------
 */
/** Enable or disable streaming of thermocouple data
 
 @param enabled YES to enable streaming
 @param period The period between readings in units of 10ms
 @param lifetime The number of readings to collect (0 for infinite)
 
 */
-(void) setStreamModeThermocouple: (bool)enabled withPeriod: (uint16_t)period withLifetime: (uint16_t)lifetime;
#pragma mark -

#pragma mark - Datalogging 
/**-----------------------------------------------------------------------------
 * @name Datalogging
 * -----------------------------------------------------------------------------
 */
/** Requests the current data logging state (is the device currently data logging?)
 
 The nodeDeviceDidUpdateDataLoggingState delegate method will be invoked in response
 Requires firmware version 3.8
 */
-(void) requestDataLoggingState;

/** Requests if data logging is allowed to be enabled
 
 The nodeDeviceDidUpdateDataLoggingAllowedState delegate method will be invoked in response
 Requires firmware version 3.8
 */
-(void) requestDataLoggingAllowedState;

/** Set the data logging allowed state
 
 @param allowed YES to allow data logging; NO to prevent data logging
 */
-(void) setDataLoggingAllowedState: (uint8_t) allowed;

/** Request the current data logging period
 
 The nodeDeviceDidUpdateDataLoggingPeriod delegate method will be invoked in response
 Requires firmware version 3.8
 */
-(void) requestDataLoggingPeriod;

/** Set current data logging period
 
 @param period Desired data logging period in 4s units
 */
-(void) requestDataLoggingPeriodToBeSet: (uint8_t)period;

/** Request Node to start data logging
 
 @param start_time Current unix timestamp (used by Node as a reference time when generating timestamps during datalogging)
 */
-(void) requestDataLoggingStartForClima: (int32_t)start_time;

/** Request Node to start data logging for motion events (both rotation and shock events). 
 Rotation events are defined as accelerometer readings that have a magnitude very close to 1g and have a calculated roll 
 or pitch that has changed from the last established baseline roll and pitch by more than a provided rotation threshold. Each time a rotation
 event is logged, the calculated roll and pitch is used as the new baseline roll and pitch.
 Shock events are defined as events where the sum of the three accelerometer axes exceeds 1g plus a provided shock threshold.
 
 @param start_time Current unix timestamp (used by Node as a reference time when generating timestamps during datalogging)
 @param shockThreshold Threshold (in g's) above 1g for a triple-axis accelerometer reading to be considered a shock event.
                    For example, if a threshold of 2g is passed to this function, then all accelerometer readings that have
                    a magnitude above 3g will be logged
 @param rotationThreshold Value in degress that the calculated roll or pitch from an accelerometer reading must differ
                          from the current baseline roll and pitch to be considered an event
 */
-(void) requestDataLoggingStartForMotionEvents: (int32_t)start_time withShockThreshold: (float)shockThreshold andRotationThreshold: (float)rotationThreshold;

/** Request all data logigng readings
 Warning: this may result in a very large transfer of data - it is recommended to use one of the other data log fetch commands
 */
-(void) requestDataLoggingReadings;

/** Request a number of the most recent data logging readings of a certain type (e.g. 100 clima readings)
 
 @param type Type of reading
 @param num_readings Number of readings to fetch
 
 */
-(void) requestDataLoggingReadingsbyType: (VTNodeDataLoggingDataType) type andCount: (uint16_t)num_readings;

/** Request the amount of free data logging space (in bytes)
 
 */
-(void) requestDataloggingFreeMemorySpace;

/** Request data log readings of a certain type within a certain date range
 
 @param type Type of reading
 @param startTimestamp Unix timestamp of lower bound of date range
 @param endTimestamp Unix timestamp of uppwer bound of date range
 
 */
-(void) requestDataLoggingReadingsbyType:(VTNodeDataLoggingDataType)type afterDate: (int32_t)startTimestamp beforeDate: (int32_t)endTimestamp;

/** Request number of data log readings of a certain type, without or without the inclusion of previously transmitted entries
 
 @param type Type of reading
 @param include_tx_entries YES to include in the count previously transmitted entries
 
 */
-(void) requestDataLoggingEntryCountByType:(VTNodeDataLoggingDataType)type includingPreviouslyTransmittedEntries: (BOOL) include_tx_entries;

/**
 Request that data logging memory be erased.
 ALL logged data will be erased from the device.
 
 nodeDeviceDidCompleteDataloggingOperation will be invoked upon completion
 */
-(void) requestDataLoggingMemoryClear;

/**
 Request that data logging memory in a specific region be erased.
 This should be called prior to performing high speed accelerometer 
 captures. A block is 64 Kb in size.
 
 @param startBlock The starting block (typically 0)
 @parama endBlock The ending block (e.g. 9 if you want 640 Kb of usable space)
 */
-(void) requestDataLoggingMemoryEraseBlocksFrom: (NSUInteger)startBlock to: (NSUInteger)endBlock;

/**
 Request that the current datalog fetch command be halted
 */
-(void) requestDataLoggingFetchCancel;

-(void) requestNanobeakModulePower: (bool)on_off;

-(void) requestNanobeakLED: (bool)on_off;

- (void) requestNanobeakTemperature;

-(void) requestNanosForChannel: (uint8_t)channel withVoltageRef: (uint16_t) vref withResistor: (uint8_t)resistor;

#pragma mark -

@end
